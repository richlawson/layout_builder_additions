<?php

/**
 * @file
 * Provides additions for Layout Builder that improves the UI and experience.
 */

use Drupal\Component\Utility\Html;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;

/**
 * Implements hook_entity_operation().
 */
function layout_builder_additions_entity_operation(EntityInterface $entity) {
  $operations = [];
  $entity_type_id = $entity->getEntityTypeId();

  // Add 'Layout' operation for layout-enabled nodes with sufficient privileges.
  if ($entity_type_id == 'node') {
    $nid = $entity->id();
    $user_current = \Drupal::currentUser();
    $route_url = Url::fromRoute('layout_builder.overrides.node.view', ['node' => $nid]);

    // Check current user for access to the override route for the node.
    if ($route_url->access($user_current)) {
      $operations['layout'] = [
        'title' => t('Layout'),
        'url' => $route_url,
        'weight' => 50,
      ];
    }
  }

  return $operations;
}

/**
 * Implements hook_form_alter().
 */
function layout_builder_additions_form_alter(&$form, FormStateInterface &$form_state, $form_id) {
  if ($form_id == 'layout_builder_add_block' || $form_id == 'layout_builder_update_block') {
    if (!empty($form['settings']['admin_label'])) {
      $form['settings']['admin_label']['#access'] = FALSE;
    }

    // Only operate on certain block types.
    if (empty($form['settings']['block_form']['#block'])) {
      return;
    }
    if ($form['settings']['block_form']['#block']->bundle() == 'media') {
      // Move the label field to the top of the form.
      if (!empty($form['settings']['label'])) {
        $form['settings']['label']['#weight'] = -10;
      }
      // Move the view mode selector to the top of the form, and change its
      // label to something more user friendly.
      if (!empty($form['settings']['view_mode'])) {
        $form['settings']['view_mode']['#weight'] = -9;
        $form['settings']['view_mode']['#title'] = t('Image size');
      }
    }
  }
}

/**
 * Implements hook_help().
 */
function layout_builder_additions_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.layout_builder_additions':
      $text = file_get_contents(__DIR__ . '/README.md');
      if (!\Drupal::moduleHandler()->moduleExists('markdown')) {
        return '<pre>' . Html::escape($text) . '</pre>';
      }
      else {
        // Use the Markdown filter to render the README.
        $filter_manager = \Drupal::service('plugin.manager.filter');
        $settings = \Drupal::configFactory()->get('markdown.settings')->getRawData();
        $config = ['settings' => $settings];
        $filter = $filter_manager->createInstance('markdown', $config);
        return $filter->process($text, 'en');
      }
  }
  return NULL;
}
