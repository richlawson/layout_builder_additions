<?php

/**
 * @file
 * Provides additions for Layout Builder that improves the UI and experience.
 */

use Drupal\Component\Render\HtmlEscapedText;
use Drupal\Component\Utility\Html;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;

/**
 * Implements hook_entity_operation().
 */
function layout_builder_additions_entity_operation(EntityInterface $entity) {
  $operations = [];
  $entity_type_id = $entity->getEntityTypeId();

  // Add 'Layout' operation for layout-enabled nodes with sufficient privileges.
  if ($entity_type_id == 'node') {
    $nid = $entity->id();
    $user_current = \Drupal::currentUser();
    $route_url = Url::fromRoute('layout_builder.overrides.node.view', ['node' => $nid]);

    // Check current user for access to the override route for the node.
    if ($route_url->access($user_current)) {
      $operations['layout'] = [
        'title' => t('Layout'),
        'url' => $route_url,
        'weight' => 50,
      ];
    }
  }

  return $operations;
}

/**
 * Implements hook_entity_type_alter().
 */
function layout_builder_additions_entity_type_alter(array &$entity_types) {

  // Node forms.
  if ($entity_definition = $entity_types['node']) {
    $entity_definition->setFormClass('default', 'Drupal\layout_builder_additions\Form\LayoutBuilderAdditionsNodeForm');
    $entity_definition->setFormClass('edit', 'Drupal\layout_builder_additions\Form\LayoutBuilderAdditionsNodeForm');
  }

  // Entity view display forms.
  if ($entity_definition = $entity_types['entity_view_display']) {
    $entity_definition->setFormClass('edit', 'Drupal\layout_builder_additions\Form\LayoutBuilderAdditionsEntityViewDisplayForm');
  }
}

/**
 * Implements hook_form_alter().
 */
function layout_builder_additions_form_alter(&$form, FormStateInterface &$form_state, $form_id) {

  // Modify the block when adding or updating a block in Layout Builder.
  if ($form_id == 'layout_builder_add_block' || $form_id == 'layout_builder_update_block') {
    if (!empty($form['settings']['admin_label'])) {
      $form['settings']['admin_label']['#access'] = FALSE;
    }

    // Only operate on certain block types.
    if (empty($form['settings']['block_form']['#block'])) {
      return;
    }
    if ($form['settings']['block_form']['#block']->bundle() == 'media') {
      // Move the label field to the top of the form.
      if (!empty($form['settings']['label'])) {
        $form['settings']['label']['#weight'] = -10;
      }
      // Move the view mode selector to the top of the form, and change its label
      // to be more user friendly.
      if (!empty($form['settings']['view_mode'])) {
        $form['settings']['view_mode']['#weight'] = -9;
        $form['settings']['view_mode']['#title'] = t('Image size');
      }
    }
  }
}

/**
 * Implements hook_node_form_alter().
 */
function layout_builder_additions_form_node_form_alter(&$form, FormStateInterface &$form_state, $form_id) {
  // Set the weight of the the "Show Title" checkbox so it appears below the title.
  if (isset($form['title'])) {
    $form['layout_builder_additions_title_display']['#weight'] = $form['title']['#weight'] + 1;
  } else {
    $form['layout_builder_additions_title_display']['#access'] = FALSE;
  }
}

/**
 * Implements hook_help().
 */
function layout_builder_additions_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.layout_builder_additions':
      $text = file_get_contents(__DIR__ . '/README.md');
      if (!\Drupal::moduleHandler()->moduleExists('markdown')) {
        return '<pre>' . Html::escape($text) . '</pre>';
      }
      else {
        // Use the Markdown filter to render the README.
        $filter_manager = \Drupal::service('plugin.manager.filter');
        $settings = \Drupal::configFactory()->get('markdown.settings')->getRawData();
        $config = ['settings' => $settings];
        $filter = $filter_manager->createInstance('markdown', $config);
        return $filter->process($text, 'en');
      }
  }
  return NULL;
}

/**
 * Implements hook_preprocess_page_title().
 */
function layout_builder_additions_preprocess_page_title(&$vars) {
  // Retrieve node data.
  $node = \Drupal::request()->attributes->get('node');

  if ($node) {
    // Initialize data to retrieve title display information.
    $entity_type = $node->getEntityType()->id();
    $bundle = $node->bundle();
    $nid = (int) $node->nid->value;
    $revision_id = (int) $node->revision_id->value;
    $title_display = \Drupal::service('layout_builder_additions.title');
    $node_association = $title_display->getEntity($entity_type, $bundle, $nid, $revision_id);

    // Initialize variables to check for access.
    $user_current = \Drupal::currentUser();
    $route_url = Url::fromRoute('layout_builder.overrides.node.view', ['node' => $nid]);

    // Check for current user to access layout overrides for this node bundle.
    if ($route_url->access($user_current) && isset($node_association->selected) && $node_association->selected == 0) {
      if (isset($vars['title'])) {
        $vars['title'] = new HtmlEscapedText('');
      }
      if (isset($vars['page']['#title'])) {
        $vars['page']['#title'] = new HtmlEscapedText('');
      }
      if (isset($vars['node'])) {
        $vars['node']->title = new HtmlEscapedText('');
      }
    }
  }

}
